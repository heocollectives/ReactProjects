{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\jminh\\\\Desktop\\\\demo\\\\ReactProjects\\\\es6-spread-operator-practice\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\jminh\\\\Desktop\\\\demo\\\\ReactProjects\\\\es6-spread-operator-practice\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\jminh\\\\Desktop\\\\demo\\\\ReactProjects\\\\es6-spread-operator-practice\\\\src\\\\components\\\\App.jsx\";\nimport React, { useState } from \"react\";\n\nfunction App() {\n  var _this = this;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputText = _useState2[0],\n      setInputText = _useState2[1]; //*the state change must be invoked\n  //** Keep track of what the user is writing within an array\n\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      items = _useState4[0],\n      setItems = _useState4[1]; //**the empty array means there will not be any bulletpoints\n  //**You're providing the value of what it requires, then giving a name for the function and setting it (hooks)\n  //*Where the inputText can be used must be located\n  //*When do we want to change/call the function, add onChange \n\n\n  function handleChange(event) {\n    //*event is passed through\n    //*Create const that will keep hold of the new value of the input\n    var newValue = event.target.value;\n    setInputText(newValue); //*this corresponds to what the user is going to input in the text box\n    //*this achieves part.1\n  }\n\n  function addItem() {\n    setItems(function (prevItems) {\n      return [].concat(_toConsumableArray(prevItems), [inputText]); //use the ...spread operator \n    });\n    setInputText(\"\"); //this resets the input\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"To-Do List\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleChange,\n    type: \"text\",\n    value: inputText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, \"Add\"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, items.map(function (todoItem) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 35\n      }\n    }, todoItem);\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/jminh/Desktop/demo/ReactProjects/es6-spread-operator-practice/src/components/App.jsx"],"names":["React","useState","App","inputText","setInputText","items","setItems","handleChange","event","newValue","target","value","addItem","prevItems","map","todoItem"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAAA,kBAEqBD,QAAQ,CAAC,EAAD,CAF7B;AAAA;AAAA,MAENE,SAFM;AAAA,MAEKC,YAFL,kBAEkC;AAC/C;;;AAHa,mBAIaH,QAAQ,CAAC,EAAD,CAJrB;AAAA;AAAA,MAINI,KAJM;AAAA,MAICC,QAJD,kBAI2B;AACxC;AAGA;AACA;;;AAEA,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAE3B;AACA;AAEA,QAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA9B;AACAP,IAAAA,YAAY,CAACK,QAAD,CAAZ,CAN2B,CAO3B;AACA;AACD;;AAED,WAASG,OAAT,GAAmB;AACfN,IAAAA,QAAQ,CAAE,UAAAO,SAAS,EAAI;AACrB,0CAAWA,SAAX,IAAsBV,SAAtB,GADqB,CACa;AACnC,KAFO,CAAR;AAGAC,IAAAA,YAAY,CAAC,EAAD,CAAZ,CAJe,CAIG;AACrB;;AAGD,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CADF,eAIE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,QAAQ,EAAGG,YAAlB;AACO,IAAA,IAAI,EAAC,MADZ;AAEO,IAAA,KAAK,EAAGJ,SAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE;AAAQ,IAAA,OAAO,EAAES,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFF,CALF,CAJF,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,KAAK,CAACS,GAAN,CAAU,UAAAC,QAAQ;AAAA,wBAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,QAAL,CAAL;AAAA,GAAlB,CADH,CADF,CAdF,CADF;AAuBD;;AAED,eAAeb,GAAf","sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n\n  const [inputText, setInputText] = useState(\"\") //*the state change must be invoked\n  //** Keep track of what the user is writing within an array\n  const [items, setItems] = useState([]); //**the empty array means there will not be any bulletpoints\n  //**You're providing the value of what it requires, then giving a name for the function and setting it (hooks)\n\n\n  //*Where the inputText can be used must be located\n  //*When do we want to change/call the function, add onChange \n  \n  function handleChange(event) {\n  \n    //*event is passed through\n    //*Create const that will keep hold of the new value of the input\n\n    const newValue = event.target.value;\n    setInputText(newValue);\n    //*this corresponds to what the user is going to input in the text box\n    //*this achieves part.1\n  }\n\n  function addItem() {\n      setItems (prevItems => {\n        return [...prevItems, inputText]; //use the ...spread operator \n      });\n      setInputText(\"\"); //this resets the input\n  }\n\n\n  return (\n    <div className=\"container\">\n      <div className=\"heading\">\n        <h1>To-Do List</h1>\n      </div>\n      <div className=\"form\">\n        <input onChange={ handleChange }\n               type=\"text\"\n               value={ inputText }\n                />\n        <button onClick={addItem}> \n        {/* Once adding a function, it must be created like the other functions */}\n          <span>Add</span>\n        </button>\n      </div>\n      <div>\n        <ul>\n          {items.map(todoItem =>  <li>{todoItem}</li>)}\n          {/* in order to list the item of arrays inside, the map function must be used */}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}